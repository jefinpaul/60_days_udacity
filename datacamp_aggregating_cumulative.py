# -*- coding: utf-8 -*-
"""datacamp aggregating cumulative.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MCbVXvQDpKrdwuQdvyheC852szcnLxtX

###Cumulative statistics
cummulative statistics are helpful in tracking summary statistics over time.
 <br/> <br/>
Calculate the cumulative sum and cumulative max of a department's weekly sales, which will allow you to identify what the total sales were so far as well as what the highest weekly sales were so far.

###Instructions
* Sort the rows of sales_1_1 by the date column in ascending order.
* Get the cumulative sum of weekly_sales and add it as a new column of sales_1_1 called cum_weekly_sales.
* Get the cumulative maximum of weekly_sales, and add it as a column called cum_max_sales.
* Print the date, weekly_sales, cum_weekly_sales, and cum_max_sales columns.
"""

# Hint
#You can sort rows of a DataFrame using .sort_values().
#Use the .cumsum() method on a column to get a cumulative sum.
#Use the .cummax() method on a column to get the cumulative maximum.
#Remember that you need to use double-brackets to subset multiple columns.#

# Sort sales_1_1 by date
sales_1_1 = sales_1_1.sort_values("date")

# Get the cumulative sum of weekly_sales, add as cum_weekly_sales col
sales_1_1["cum_weekly_sales"] = sales_1_1["weekly_sales"].cumsum()

# Get the cumulative max of weekly_sales, add as cum_max_sales col
sales_1_1["cum_max_sales"] = sales_1_1["weekly_sales"].cummax()

